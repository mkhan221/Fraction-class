Script started on Tue 05 Sep 2023 06:07:04 PM CDT
]0;py9242yg@csci4:~/t3[?1034h[py9242yg@csci4 t3]$ cat newfraction2.h
#ifndef NEWFRACTION2_H
#define NEWFRACTION2_H
#include<iostream>
using namespace std;
/*Declaration of class named fraction*/
class fraction
{
 private:
  /**numerator of the fraction*/
  int num;
  /**denominator of the fraction*/
  int denom;

 public:
  /**Constructor;
   *@pre none
   *@post initializes the value of the num and denom*/
  fraction();
  
  /**Constructor;
     /*@param int x the numerator of the fraction
     /*@param int y the denominator of the fraction
     /*@pre none
     /*@post takes user input values of x and y*/
  fraction(int x,int y);
  
  /**Member function*/
  /** Sets the numerator
      /*@param int x the value of the numerator
      /*@pre none
      /*@post the numerator has been set to a particular value*/
  void setNum(int x);
  
  /**Member function*/
  /** Sets the denominator*/
  /*@param int y the values of the denominator
    /*@pre none
    /*@post the denominator has been set to a particular value*/
  void setDenom(int y);
  
  /**Member function*/
  /**returns the numerator*/
  /*@pre none
    /*@post the value returned is the numerator*/
  int getNum();
  
  /**Member function*/
  /**returns the denominator*/
  /*@pre none
    /*@post the value returned is the denominator*/
  int getDenom();
  
  /**Member function*/
  /**Displays a fraction*/
  /*@pre none
    /*@post displays a fraction*/
  void display();
  
  /**Member function*/
  /** simplifys the fraction*/
  /*pre none*/
  /*post after fraction input is received it simplifys it*/
  void simplify();
  
  /**Member function*/
  /**Adds two fraction*/
  /*@param fraction x the values of the two fraction*/
  /*@pre none
    /*@post computes the addition of two fractions*/
  fraction operator+(fraction x);
  
  /**Member function*/
  /**Subtracts two fraction*/
  /*@param fraction x the values of the two fraction*/
  /*@pre none
    /*@post computes the subtraction of two fractions*/
  fraction operator-(fraction x);
  
  /**Friend function*/
  /** function for taking inputs*/
  /*@param istream &input takes user input
    /*@param fraction &f stores the input as fraction object*/
  /*@pre none*/
  /*@post takes input from user and stores it as fraction object*/
  friend istream &operator>>( istream &input, fraction &f ){
    input>>f.num>>f.denom;
    return cin;
  }
};

/**Non-member function*/
/** Multiplys two fraction*/
/*@param fraction x one of the fractions*/
/*@param fraction y the other fraction*/
/*@pre none*/
/*@post computes the multiplication of two fractions*/
fraction operator*( fraction x, fraction y);

/**Non-member function*/
/** Divides two fraction*/
/*@param fraction x one of the fractions*/
/*@param fraction y the other fraction*/
/*@pre none*/
/*@post computes the division of two fractions*/
fraction operator/( fraction x, fraction y);

/**Non-member function*/
/**find the greatest common divisor between two values*/
/*@param int a first value
  /*@param int b second value
  /*@pre none
  /*@post finds gcd to help simplify the fraction*/
int gcd(int a, int b);

/**Non-member function*/
/**Outputs the resutls*/
/*@param ostream &output 
  /*@param fraction 
  /*@pre none*/
/*@post function that takes and returns stream object*/
ostream &operator<<( ostream &output, fraction f ) ;

#endif
]0;py9242yg@csci4:~/t3[py9242yg@csci4 t3]$ cat enw[K[Kn[K[Knewfraction2.cpp
/** implementation **/
/** file: newfraction2.cpp*/
/** Class IMPLEMENTED: fraction (See newfraction2.h for documentation.)*/
#include "newfraction2.h"


fraction::fraction()
{
  num = 0;//constructor initializes value of the fraction if not given by the user
  denom = 1;
}
fraction::fraction(int x,int y)
{
  num = x; //constructor takes fraction  value from the user
  denom = y;
}
void fraction::setNum(int x)
{
  num = x;//sets the numerator
}
void fraction::setDenom(int y)
{
  if (denom !=0)
    {
      denom=y; //sets the denominator
    }
  else
    {
      cout<<"Denominator cannot be zero."<<endl;
    }
}
int fraction::getNum()
{
  return num;//returns the numerator
}
int fraction::getDenom()
{
  return denom;//returns the denominator
}
void fraction::display()
{
  if(num>=0 && denom>=0)
    simplify();
  cout<<num<<"/"<<denom;//displays the fraction
}

/**Greatest common divisorz*/
int gcd(int a, int b)
{

  if (a == 0)
    return b;
  if (b == 0)
    return a;
  //Fuction thats helps simplifying fraction
  if (a == b)
    return a;

  if (a > b)
    return gcd(a-b, b);
  return gcd(a, b-a);
}


void fraction::simplify()
{
  int y=gcd(num,denom);//simplifys the fraction
  num/=y;
  denom/=y;
}

fraction fraction::operator+(fraction x)
{
  int numerator,denominator;
  numerator = (x.getNum()*getDenom())+(getNum()*x.getDenom());// addition function using operator
  denominator = x.getDenom()*getDenom();
  fraction temp(numerator,denominator);
  return temp;
}

fraction fraction::operator-(fraction x)
{
  int numerator,denominator;
  numerator = (getNum()*x.getDenom())-(x.getNum()*getDenom());// subtraction function using operator
  denominator = x.getDenom()*getDenom();
  fraction temp(numerator,denominator);
  return temp;
}


/* Multiply function */
fraction operator*( fraction x, fraction y)
{
  int numerator,denominator;
  numerator = (x.getNum()*y.getNum()); //multiplication function using operator
  denominator = x.getDenom()*y.getDenom();
  fraction temp(numerator,denominator);
  return temp;
}

/* Divide Function */
fraction operator/( fraction x, fraction y)
{
  int numerator,denominator;
  numerator = (x.getNum()*y.getDenom()); //division function using operator
  denominator = x.getDenom()*y.getNum();
  fraction temp(numerator,denominator);
  return temp;
}
/**Output function*/
ostream &operator<<( ostream &output, fraction f ) { //function that takes and returns stream object
  if(f.getNum()>=0 && f.getDenom()>=0)
    f.simplify();
  output << f.getNum()<<"/"<<f.getDenom();
  return output;
}
]0;py9242yg@csci4:~/t3[py9242yg@csci4 t3]$ cat project1_task3.cpp
/*This program demonstrates a fraction class with different functions 
by using the operator method
Mohammad Aryan Khan
py9242yg
09/05/2023
Instructor:Jie Meichsner
*/
#include"newfraction2.h" 
#include <iostream>
using namespace std;
int main()
{
  fraction f1;
  fraction f2;
  cout<<"Enter the first fraction: numerator denominator\n";
  cin>>f1;
  cout<<"Enter the Second fraction: numerator denominator\n";
  cin>>f2;
  cout<<"The two fractions entered are\n";
  cout<<"f1= ";
  cout<<f1;
  cout<<"\nf2= ";
  cout<<f2;

  cout<<"\n\nThe arithmetic operation on these two fractions:\n";
  cout<<"f1+f2=";
  fraction f3;
  f3 = f1+f2;
  cout<<f3;
  cout<<"\nf1-f2=";
  f3 = f1-f2;
  cout<<f3;
  cout<<"\nf1*f2=";
  f3 = f1*f2;
  cout<<f3;
  cout<<"\nf1/f2=";
  f3 = f1/f2;
  cout<<f3;
}
]0;py9242yg@csci4:~/t3[py9242yg@csci4 t3]$ g++ -o project1_task3.exe project1_task4[K3 [K.cpp newfraction2.c pp
]0;py9242yg@csci4:~/t3[py9242yg@csci4 t3]$ ./project1_task3.exe
Enter the first fraction: numerator denominator
3 5
Enter the Second fraction: numerator denominator
2 3
The two fractions entered are
f1= 3/5
f2= 2/3

The arithmetic operation on these two fractions:
f1+f2=19/15
f1-f2=-1/15
f1*f2=2/5
f1/f2=9/10]0;py9242yg@csci4:~/t3[py9242yg@csci4 t3]$ ./project1_task3.exe
Enter the first fraction: numerator denominator
4 7
Enter the Second fraction: numerator denominator
5 9
The two fractions entered are
f1= 4/7
f2= 5/9

The arithmetic operation on these two fractions:
f1+f2=71/63
f1-f2=1/63
f1*f2=20/63
f1/f2=36/35]0;py9242yg@csci4:~/t3[py9242yg@csci4 t3]$ exit

Script done on Tue 05 Sep 2023 06:08:23 PM CDT
